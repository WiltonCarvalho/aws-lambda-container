package helloworld;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.LambdaLogger;
import com.amazonaws.services.lambda.runtime.events.S3Event;

import com.amazonaws.services.lambda.runtime.events.models.s3.S3EventNotification.S3EventNotificationRecord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * Handler for requests to Lambda function.
 */
public class App implements RequestHandler<Object, String>{
  Gson gson = new GsonBuilder().setPrettyPrinting().create();
  @Override
  public String handleRequest(Object event, Context context)
  {
    LambdaLogger logger = context.getLogger();
    String response = new String("SUCCESS");
    // log execution details
    logger.log("ENVIRONMENT VARIABLES: \n" + gson.toJson(System.getenv()) + "\n");
    logger.log("CONTEXT: \n" + gson.toJson(context) + "\n");
    // process event
    logger.log("EVENT: \n" + gson.toJson(event) + "\n");
    return response;
    String objectKey = args[0];
    String fromBucket = args[1];
    String toBucket = args[2];
    System.out.format("Copying object %s from bucket %s to %s\n", objectKey, fromBucket, toBucket);
    ProfileCredentialsProvider credentialsProvider = ProfileCredentialsProvider.create();
    Region region = Region.US_EAST_1;
    S3Client s3 = S3Client.builder()
      .region(region)
      .credentialsProvider(credentialsProvider)
      .build();
    copyBucketObject (s3, fromBucket, objectKey, toBucket);
    s3.close();
  }

  public static String copyBucketObject (S3Client s3, String fromBucket, String objectKey, String toBucket)
  {
    String encodedUrl = "";
    try {
      encodedUrl = URLEncoder.encode(fromBucket + "/" + objectKey, StandardCharsets.UTF_8.toString());
    } catch (UnsupportedEncodingException e) {
      System.out.println("URL could not be encoded: " + e.getMessage());
    }
    CopyObjectRequest copyReq = CopyObjectRequest.builder()
      .copySourceIfMatch(encodedUrl)
      .destinationBucket(toBucket)
      .destinationKey(objectKey)
      .build();
    try {
      CopyObjectResponse copyRes = s3.copyObject(copyReq);
      return copyRes.copyObjectResult().toString();
    } catch (S3Exception e) {
      System.err.println(e.awsErrorDetails().errorMessage());
      System.exit(1);
    }
    return "";
  }
}
